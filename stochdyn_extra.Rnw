\documentclass[english]{beamer}
\definecolor{links}{HTML}{2A1B81}
\hypersetup{colorlinks,linkcolor=,urlcolor=links}
\usepackage{natbib}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\usepackage{amsmath}
\usepackage{bm}
\usepackage{multicol}
\usepackage{color}
\usepackage{amssymb}
\usepackage{hyperref}
\usepackage{bm}
\usepackage{graphicx}
\let\oldemph=\emph
\renewcommand{\emph}[1]{{\color{red} {\textbf{#1}}}}
\newcommand{\pkglink}[1]{\href{http://cran.r-project.org/web/packages/#1}{\nolinkurl{#1}}}
\newcommand{\rflink}[1]{\href{https://r-forge.r-project.org/projects/#1/}{\nolinkurl{#1}}}
\newcommand{\fnlink}[2]{\href{http://stat.ethz.ch/R-manual/R-patched/library/#1/html/#2.html}{\nolinkurl{#1:#2}}}
\newcommand{\code}[1]{{\tt #1}}
\newcommand{\ssqobs}{\sigma^2_{\mbox{\small obs}}}
\newcommand{\ssqproc}{\sigma^2_{\mbox{\small proc}}}
\newcommand{\obs}[1]{#1_{\text{\small obs}}}
\newcommand{\obst}[1]{#1_{\text{\small obs}}(t)}
\newcommand{\obstm}[1]{#1_{\text{\small obs}}(t-1)}

\bibliographystyle{notitle}

\usetheme{Frankfurt}
\usecolortheme{dove}
\setbeamercovered{transparent}
\setbeamercolor{description item}{fg=blue}

\usepackage{babel}
\begin{document}

\makeatletter
\def\newblock{\beamer@newblock}
\makeatother 


% http://tex.stackexchange.com/questions/38015/beamer-best-way-to-span-long-enumerations-on-different-frames
\makeatletter
\newenvironment{cenumerate}{%
  \enumerate
  \setcounter{\@enumctr}{\csname saved@\@enumctr\endcsname}%
}{%
  \expandafter\xdef\csname saved@\@enumctr\endcsname{\the\value{\@enumctr}}%
  \endenumerate
}
\newenvironment{cenumerate*}{%
  \enumerate
}{%
  \expandafter\xdef\csname saved@\@enumctr\endcsname{\the\value{\@enumctr}}%
  \endenumerate
}
\makeatother
<<opts,echo=FALSE>>=
require("knitr")
knit_hooks$set(crop=hook_pdfcrop)
opts_chunk$set(fig.width=4,fig.height=4,
               out.width="0.6\\textwidth",
               fig.align="center",
               tidy=FALSE,error=FALSE)
@
<<libs,echo=FALSE,message=FALSE>>=
library(reshape)
library(lattice)
## library(lme4)
## library(plotrix)
library(ggplot2)
theme_set(theme_bw())
source("labfuns.R")
@ 

% \pgfdeclareimage[height=0.5cm]{uflogo}{letterhdwm}
% \logo{\pgfuseimage{uflogo}}
\AtBeginSection[]{
  \frame<beamer>{ 
     \frametitle{Outline}   
     \tableofcontents[currentsection] 
   }
 }

\section{Fancier methods}
\subsection{SIMEX}
\begin{frame}
\frametitle{SIMEX}
\begin{itemize}
\item \textbf{SIM}ulation-\textbf{EX}trapolation method
\item Requires (1) an independent estimate of the observation error; (2) that we can sensibly add \emph{additional} observation error to the data
\item Slightly easier for Normal errors
\item Probably most sensible for experimental data?
\item Examples: \cite{Ellner+2002,MelbourneChesson2006}
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{Procedure}
\begin{itemize}
\item based on estimated observation error, pick a range of increased error values, e.g. 
tripling the existing observation variance in 4â€“8 steps
\item for each error magnitude, generate a data set with that increased error (more stable to inflate a single set of errors)
\item estimate parameters for each set using gradient matching (i.e. assume $\ssqobs=0$)
\item fit a linear or quadratic regression model
for $\text{parameter}=f(\text{total error}$)
\item extrapolate the fit to zero
\end{itemize}
\end{frame}

<<procobssim1,echo=FALSE>>=
## simulate logistic y with process and observation error
set.seed(1001)
r  <-  1
K  <-  10
t0  <-  5
n0  <-  1
tot.t  <-  10
dt <- 0.5
sd.proc <-  1
sd.obs  <-  1
set.seed(1001)
tvec  <-  seq(1,tot.t,by=dt)
n <- length(tvec)
y  <-  numeric(n)
ydet <- numeric(n)
y[1]  <-  n0
ydet[1]  <-  n0
e.proc  <-  rnorm(n,mean=0,sd=sd.proc)
e.obs  <-  rnorm(n,mean=0,sd=sd.obs)
for (i in 2:n) {
  ydet[i]  <-  ydet[i-1]+r*ydet[i-1]*(1-ydet[i-1]/K)*dt
  y[i]  <-  y[i-1]+(r*y[i-1]*(1-y[i-1]/K)+e.proc[i-1])*dt ## process only
}
## sd is variance in GROWTH RATE: should translate to
## sd.proc/4 with delta-t=0.5
y.procobs  <-  y+e.obs
y.obs  <-  ydet+e.obs
X  <-  cbind(ydet,y,y.procobs,y.obs)
@ 

<<simlogistdata,echo=FALSE,message=FALSE>>=
library(bbmle)
simlogistdata  <-  function(seed=1001,
  r=1,K=10,n0=1,t0=1,tot.t=10,dt=0.5,
  sd.proc=1,sd.obs=1) {
  if (!is.null(seed)) set.seed(seed)
  tvec  <-  seq(1,tot.t,by=dt)
  n <- length(tvec)
  y  <-  numeric(n)
  ydet <- numeric(n)
  y[1]  <-  n0
  ydet[1]  <-  n0
  e.proc  <-  rnorm(n,mean=0,sd=sd.proc)
  e.obs  <-  rnorm(n,mean=0,sd=sd.obs)
  for (i in 2:n) {
    ydet[i]  <-  ydet[i-1]+r*ydet[i-1]*(1-ydet[i-1]/K)*dt
    y[i]  <-  y[i-1]+(r*y[i-1]*(1-y[i-1]/K)+e.proc[i-1])*dt ## process only
  }
  y.procobs  <-  y+e.obs
  y.obs  <-  ydet+e.obs
  cbind(tvec,y.procobs)
}
@ 

<<onestep1,echo=FALSE>>=
## fit to logistic by one-step-ahead (assume proc. error only)
stepfun2  <-  function(r,K,sigma,y) {
  ystart  <-  y[-n]
  yend  <-  y[-1]
  y.pred  <-  K/(1+(K/ystart-1)*exp(-r*dt))
  -sum(dnorm(yend,y.pred,sd=sigma,log=TRUE))
}
jagged  <-  FALSE
newdata  <-  simlogistdata(tot.t=100,sd.proc=2)
n  <-  nrow(newdata)
y.procobs  <-  newdata[,2]
tvec  <-  newdata[,1]
randvals  <-  rnorm(n,mean=0,sd=1)
simex0  <-  function(s,...) {
  y.simex = y.procobs+if (jagged) rnorm(n,mean=0,sd=s) else randvals*s
  coef(mle2(stepfun2,start=list(r=1,K=10,sigma=1),
                      data=list(y=y.simex),...))
}     
sdvec  <-  seq(0,2,length=10)
simextab  <-  t(sapply(sdvec,simex0,method="Nelder-Mead"))
predmat  <-  apply(simextab,1,
  function(X) {
    r=X[1]; K=X[2]; n0=y.procobs[1]
    K/(1+(K/n0-1)*exp(-r*(tvec-t0)))
  })
##matplot(predmat,type="b")
rvec  <-  simextab[,"r"]
Kvec  <-  simextab[,"K"]
tsdvec  <-  sqrt(sd.obs^2+sdvec^2)
tsdvec2a  <-  seq(0,1,length=40)
tsdvec2b  <-  seq(1,max(tsdvec),length=40)
q.r = lm(rvec~tsdvec+I(tsdvec^2))
q.K = lm(Kvec~tsdvec+I(tsdvec^2))
l.r = lm(rvec~tsdvec)
l.K = lm(Kvec~tsdvec)
@

\begin{frame}
\frametitle{Logistic fit}
<<simexfig,echo=FALSE,fig.width=6,out.width="0.9\\textwidth">>=
op=par(mar=c(5,5,2,5)+0.1,las=1,cex=1.5,lwd=2,bty="l")
plot(tsdvec,rvec,xlim=c(0,max(tsdvec)),
     xlab="Total observation error",ylab="",ylim=c(0.9,max(rvec)))
mtext(side=2,"r",line=3,cex=1.5)
lines(tsdvec2a,predict(q.r,newdata=data.frame(tsdvec=tsdvec2a)),lty=2)
lines(tsdvec2b,predict(q.r,newdata=data.frame(tsdvec=tsdvec2b)))
abline(h=1,lty=3)
points(par("usr")[1],coef(q.r)[1],pch=16,xpd=NA)
## K plot
par(new=TRUE)
plot(tsdvec,Kvec,pch=2,xlim=c(0,max(tsdvec)),ylim=c(9,10.5),axes=FALSE,
     xlab="",ylab="",col="darkgray")
lines(tsdvec2a,predict(q.K,newdata=data.frame(tsdvec=tsdvec2a)),lty=2,col="darkgray")
lines(tsdvec2b,predict(q.K,newdata=data.frame(tsdvec=tsdvec2b)),col="darkgray")
axis(side=4,col="darkgray",col.axis="darkgray")
mtext(side=4,at=9.75,line=par("mgp")[1],"K",col="darkgray")
abline(h=10,lty=3,col="darkgray")
points(par("usr")[2],coef(q.K)[1],pch=16,col="darkgray",xpd=NA)
par(op)
@ 
\end{frame}

\subsection{Kalman filter}

\begin{frame}
\frametitle{Kalman filter}
\begin{itemize}
\item General approach to account for dynamic variance, expected population state
\item Works for \emph{linear} (typically Normal) models; 
can be extended to nonlinear models
\item Natural multivariate extensions:
include bias, external shocks, etc. \citep{Schnute1994}
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{Concept and implementation}

\begin{itemize}
\item \emph{Concept}
\begin{itemize}
\item Variance increases with process error; \\
decreases with (accurate) observations
\item Expected population state follows expected dynamics; \\
drawn toward (accurate) observations
\end{itemize}
\pause
\item \emph{Procedure} (pseudo-pseudo-code)
\begin{itemize}
\item Run KF for specified values of parameters, $\ssqobs$, $\ssqproc$ to compute $\hat N(t)$, $\sigma^2_N(t)$
\item Estimate objective function (SSQ) for $\obs{N}|\hat N,\sigma^2_N$
\item Minimize over $\{\text{parameters},\ssqobs,\ssqproc\}$
\end{itemize}
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{Autoregressive model}
\begin{equation*}
\begin{split}
N(t) & \sim \text{Normal}(a + bN(t-1),\ssqproc) \\
\obst{N} & \sim \text{Normal}(N((t),\ssqobs)
\end{split}
\end{equation*}
\begin{itemize}
\item $b<1, a>0 \to$ stable dynamics
\item $b>1 \to$ exponential growth
\end{itemize}
\end{frame}


\begin{frame}
\frametitle{Procedure}

\begin{cenumerate*}
\item Update mean, variance of true density according to previous expected mean and variance:
\begin{equation*}
\begin{split}
\text{mean}(N(t)|\obstm{N}) & \equiv \mu_1  = a + b\mu_0 \\ 
\mbox{Var}(N(t)|\obstm{N}) & \equiv \sigma^2_1 =  b^2 \sigma^2_0 + \ssqproc
\end{split}
\end{equation*}
\end{cenumerate*}
\end{frame}

\begin{frame}
\begin{cenumerate}
\item Now update the mean and variance of the \emph{observed} density at time $t$:
\begin{equation*}
\begin{split}
\text{mean}(\obst{N}|\obstm{N}) & \equiv \mu_2  =  \mu_1 \\ 
\text{Var}(\obst{N}|\obstm{N}) & \equiv \sigma^2_2  =  \sigma^2_1 + \ssqobs
\end{split}
\end{equation*}
\end{cenumerate}
\end{frame}


\begin{frame}
\begin{cenumerate}
\item Now update true (expected) mean and variance to account for \emph{current} observation:
\begin{equation*}
\begin{split}
\text{mean}(N|\obst{N}) & \equiv \mu_3  =  \mu_1 +  \frac{\sigma^2_1}{\sigma^2_2}(\obst{N}-\mu_2) \\ 
\text{Var}(N(t)|\obst{N}) & \equiv \sigma^2_3  =  \sigma^2_1\left(1 - \frac{\sigma^2_1}{\sigma^2_2}\right)
\end{split}
\end{equation*}
\end{cenumerate}
\end{frame}

\begin{frame}[fragile]
\frametitle{Pseudo-code}
{\small
<<pseudoKF,eval=FALSE>>=
KFpred <- function(params,var_proc,var_obs,init) {
  set_initial_values
  for (i in 2:nt) {
     ## ... calculate mu{1-3}, sigma^2{1-3} as above
     N[i] <- mu_3; Var[i] <- sigmasq_3
  }
  return(list(N=N,Var=Var))
}
KFobj <- function(params,var_proc,var_obs,init,Nobs) {
    pred <- KFpred(params,var_proc,var_obs,init)
    obj_fun(Nobs,mean=pred$N,sd=sqrt(pred$Var))
}
minimize(KFobj,start_values,Nobs)
@
}
\end{frame}

\begin{frame}
\frametitle{Extended Kalman filter}
To fit (mildly) nonlinear models with
the deterministic skeleton
$$
N(t+1) = f(N(t)),
$$  we just replace
$a$ and $b$ in the autoregressive model $N(t+1)=a+b N(t)$
with the coefficients of the first two terms of the \emph{Taylor expansion} of $f()$:
$$
f(N(\tau)) \approx f(N(t)) + \frac{df}{dN} (N(\tau)-N(t)) + \ldots
$$

<<echo=FALSE,eval=FALSE>>=
a <- calc_pop_add(N[i-1],params)   ## maybe constant
b <- calc_pop_mult(N[i-1],params)  ## ditto
@ 

\end{frame}

\begin{frame}
\frametitle{Multivariate extension \citep{Schnute1994}}
\begin{equation*}
\begin{split}
\text{process: } \boldsymbol{X}_t & = 
\boldsymbol{A}_t + \boldsymbol{B}_t \boldsymbol{X}_{t-1}+\boldsymbol{\delta}_t \\
\text{observation: } \boldsymbol{Y}_t & = 
\boldsymbol{C}_t + \boldsymbol{D}_t \boldsymbol{X}_t+\boldsymbol{\epsilon}_t
\end{split}
\end{equation*}

Allows for bias, cross-species effects in both process and observation, correlation in process and observation noise \ldots 
\end{frame}

\begin{frame}
\frametitle{References}
\let\emph\oldemph
\tiny
\bibliography{stochdyn}
\end{frame}

\end{document}
